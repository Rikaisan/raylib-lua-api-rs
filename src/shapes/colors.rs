use std::collections::HashMap;

use raylib::color::Color;

pub struct ColorMap {
    pub map: HashMap<String, Color>
}

impl ColorMap {
    pub fn new() -> Self { Self::default() }
}

impl Default for ColorMap {
    fn default() -> Self {
        Self {
            map: HashMap::from(
                [
                    ("indianred".into(), Color::INDIANRED),
                    ("lightcoral".into(), Color::LIGHTCORAL),
                    ("salmon".into(), Color::SALMON),
                    ("darksalmon".into(), Color::DARKSALMON),
                    ("lightsalmon".into(), Color::LIGHTSALMON),
                    ("crimson".into(), Color::CRIMSON),
                    ("red".into(), Color::RED),
                    ("firebrick".into(), Color::FIREBRICK),
                    ("darkred".into(), Color::DARKRED),
                    ("pink".into(), Color::PINK),
                    ("lightpink".into(), Color::LIGHTPINK),
                    ("hotpink".into(), Color::HOTPINK),
                    ("deeppink".into(), Color::DEEPPINK),
                    ("mediumvioletred".into(), Color::MEDIUMVIOLETRED),
                    ("palevioletred".into(), Color::PALEVIOLETRED),
                    ("coral".into(), Color::CORAL),
                    ("tomato".into(), Color::TOMATO),
                    ("orangered".into(), Color::ORANGERED),
                    ("darkorange".into(), Color::DARKORANGE),
                    ("orange".into(), Color::ORANGE),
                    ("gold".into(), Color::GOLD),
                    ("yellow".into(), Color::YELLOW),
                    ("lightyellow".into(), Color::LIGHTYELLOW),
                    ("lemonchiffon".into(), Color::LEMONCHIFFON),
                    ("lightgoldenrodyellow".into(), Color::LIGHTGOLDENRODYELLOW),
                    ("papayawhip".into(), Color::PAPAYAWHIP),
                    ("moccasin".into(), Color::MOCCASIN),
                    ("peachpuff".into(), Color::PEACHPUFF),
                    ("palegoldenrod".into(), Color::PALEGOLDENROD),
                    ("khaki".into(), Color::KHAKI),
                    ("darkkhaki".into(), Color::DARKKHAKI),
                    ("lavender".into(), Color::LAVENDER),
                    ("thistle".into(), Color::THISTLE),
                    ("plum".into(), Color::PLUM),
                    ("violet".into(), Color::VIOLET),
                    ("orchid".into(), Color::ORCHID),
                    ("fuchsia".into(), Color::FUCHSIA),
                    ("magenta".into(), Color::MAGENTA),
                    ("mediumorchid".into(), Color::MEDIUMORCHID),
                    ("mediumpurple".into(), Color::MEDIUMPURPLE),
                    ("rebeccapurple".into(), Color::REBECCAPURPLE),
                    ("blueviolet".into(), Color::BLUEVIOLET),
                    ("darkviolet".into(), Color::DARKVIOLET),
                    ("darkorchid".into(), Color::DARKORCHID),
                    ("darkmagenta".into(), Color::DARKMAGENTA),
                    ("purple".into(), Color::PURPLE),
                    ("darkpurple".into(), Color::DARKPURPLE),
                    ("indigo".into(), Color::INDIGO),
                    ("slateblue".into(), Color::SLATEBLUE),
                    ("darkslateblue".into(), Color::DARKSLATEBLUE),
                    ("mediumslateblue".into(), Color::MEDIUMSLATEBLUE),
                    ("greenyellow".into(), Color::GREENYELLOW),
                    ("chartreuse".into(), Color::CHARTREUSE),
                    ("lawngreen".into(), Color::LAWNGREEN),
                    ("lime".into(), Color::LIME),
                    ("limegreen".into(), Color::LIMEGREEN),
                    ("palegreen".into(), Color::PALEGREEN),
                    ("lightgreen".into(), Color::LIGHTGREEN),
                    ("mediumspringgreen".into(), Color::MEDIUMSPRINGGREEN),
                    ("springgreen".into(), Color::SPRINGGREEN),
                    ("mediumseagreen".into(), Color::MEDIUMSEAGREEN),
                    ("seagreen".into(), Color::SEAGREEN),
                    ("forestgreen".into(), Color::FORESTGREEN),
                    ("green".into(), Color::GREEN),
                    ("darkgreen".into(), Color::DARKGREEN),
                    ("yellowgreen".into(), Color::YELLOWGREEN),
                    ("olivedrab".into(), Color::OLIVEDRAB),
                    ("olive".into(), Color::OLIVE),
                    ("darkolivegreen".into(), Color::DARKOLIVEGREEN),
                    ("mediumaquamarine".into(), Color::MEDIUMAQUAMARINE),
                    ("darkseagreen".into(), Color::DARKSEAGREEN),
                    ("lightseagreen".into(), Color::LIGHTSEAGREEN),
                    ("darkcyan".into(), Color::DARKCYAN),
                    ("teal".into(), Color::TEAL),
                    ("aqua".into(), Color::AQUA),
                    ("cyan".into(), Color::CYAN),
                    ("lightcyan".into(), Color::LIGHTCYAN),
                    ("paleturquoise".into(), Color::PALETURQUOISE),
                    ("aquamarine".into(), Color::AQUAMARINE),
                    ("turquoise".into(), Color::TURQUOISE),
                    ("mediumturquoise".into(), Color::MEDIUMTURQUOISE),
                    ("darkturquoise".into(), Color::DARKTURQUOISE),
                    ("cadetblue".into(), Color::CADETBLUE),
                    ("steelblue".into(), Color::STEELBLUE),
                    ("lightsteelblue".into(), Color::LIGHTSTEELBLUE),
                    ("powderblue".into(), Color::POWDERBLUE),
                    ("lightblue".into(), Color::LIGHTBLUE),
                    ("skyblue".into(), Color::SKYBLUE),
                    ("lightskyblue".into(), Color::LIGHTSKYBLUE),
                    ("deepskyblue".into(), Color::DEEPSKYBLUE),
                    ("dodgerblue".into(), Color::DODGERBLUE),
                    ("cornflowerblue".into(), Color::CORNFLOWERBLUE),
                    ("royalblue".into(), Color::ROYALBLUE),
                    ("blue".into(), Color::BLUE),
                    ("mediumblue".into(), Color::MEDIUMBLUE),
                    ("darkblue".into(), Color::DARKBLUE),
                    ("navy".into(), Color::NAVY),
                    ("midnightblue".into(), Color::MIDNIGHTBLUE),
                    ("cornsilk".into(), Color::CORNSILK),
                    ("blanchedalmond".into(), Color::BLANCHEDALMOND),
                    ("bisque".into(), Color::BISQUE),
                    ("navajowhite".into(), Color::NAVAJOWHITE),
                    ("wheat".into(), Color::WHEAT),
                    ("burlywood".into(), Color::BURLYWOOD),
                    ("tan".into(), Color::TAN),
                    ("rosybrown".into(), Color::ROSYBROWN),
                    ("sandybrown".into(), Color::SANDYBROWN),
                    ("goldenrod".into(), Color::GOLDENROD),
                    ("darkgoldenrod".into(), Color::DARKGOLDENROD),
                    ("peru".into(), Color::PERU),
                    ("chocolate".into(), Color::CHOCOLATE),
                    ("saddlebrown".into(), Color::SADDLEBROWN),
                    ("sienna".into(), Color::SIENNA),
                    ("brown".into(), Color::BROWN),
                    ("darkbrown".into(), Color::DARKBROWN),
                    ("maroon".into(), Color::MAROON),
                    ("white".into(), Color::WHITE),
                    ("snow".into(), Color::SNOW),
                    ("honeydew".into(), Color::HONEYDEW),
                    ("mintcream".into(), Color::MINTCREAM),
                    ("azure".into(), Color::AZURE),
                    ("aliceblue".into(), Color::ALICEBLUE),
                    ("ghostwhite".into(), Color::GHOSTWHITE),
                    ("whitesmoke".into(), Color::WHITESMOKE),
                    ("seashell".into(), Color::SEASHELL),
                    ("beige".into(), Color::BEIGE),
                    ("oldlace".into(), Color::OLDLACE),
                    ("floralwhite".into(), Color::FLORALWHITE),
                    ("ivory".into(), Color::IVORY),
                    ("antiquewhite".into(), Color::ANTIQUEWHITE),
                    ("linen".into(), Color::LINEN),
                    ("lavenderblush".into(), Color::LAVENDERBLUSH),
                    ("mistyrose".into(), Color::MISTYROSE),
                    ("gainsboro".into(), Color::GAINSBORO),
                    ("lightgray".into(), Color::LIGHTGRAY),
                    ("silver".into(), Color::SILVER),
                    ("darkgray".into(), Color::DARKGRAY),
                    ("gray".into(), Color::GRAY),
                    ("dimgray".into(), Color::DIMGRAY),
                    ("lightslategray".into(), Color::LIGHTSLATEGRAY),
                    ("slategray".into(), Color::SLATEGRAY),
                    ("darkslategray".into(), Color::DARKSLATEGRAY),
                    ("black".into(), Color::BLACK),
                    ("blank".into(), Color::BLANK),
                    ("raywhite".into(), Color::RAYWHITE)
                ]
            )
        }
    }
}

impl ColorMap {
    pub fn from(&self, name: impl Into<String>) -> Option<Color> {
        self.map.get(&name.into()).map(|c| c.to_owned())
    }
}